rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isUser(userID) {
      return request.auth != null && request.auth.uid == userID;
    }

    function createFields(required, optional) {
      let allAllowedFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required) &&
        request.resource.data.keys().hasOnly(allAllowedFields);
    }
    
  	function updateFields(required, optional) {
      let allAllowedFields = required.concat(optional);
      return request.resource.data.diff(resource.data).affectedKeys().hasAll(required) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(allAllowedFields);
    }
    
    function createEvent() {
    	return request.auth != null 
      	&& createFields(["ownerId", "title", "description", "visibility", "created_time"], ["eventId"])
      	&& request.resource.data.ownerId == request.auth.uid
        && request.resource.data.title is string && request.resource.data.title.size() > 0
        && request.resource.data.description is string
        && request.resource.data.created_time == request.time
        && request.resource.data.visibility in ["private", "public"];
    }

    function checkDescription() {
      return request.resource.data.description is string;
    }

    function checkInvite() {
      return request.resource.data.limit is number && request.resource.data.limit >= 0
        && request.resource.data.needApproval is bool
        && request.resource.data.secret is bool;
    }
    
    function isEventOwner(eventID) {
    	return request.auth != null && get(/databases/$(database)/documents/events/$(eventID)).data.ownerId  == request.auth.uid;
    }
    
    function isEventMember(eventID) {
    	return request.auth != null
        && get(/databases/$(database)/documents/events/$(eventID)/members/$(request.auth.uid)).data.active == true;
    }

    match /users/{userID} {
    	allow read;
      allow delete: if false;
      allow create: if isUser(userID) && createFields(["uid", "username", "about", "provider"], ["imageURL"]);
      allow update: if isUser(userID) && updateFields([], ["username", "about", "provider", "imageURL"]);
    }
    
    match /events/{eventID} {
	    allow read;
      allow create: if createEvent();
      allow update, delete: if isEventOwner(eventID) 
        && (checkDescription()
          || checkInvite()
        );

      match /private/secret {
        allow read: if isEventOwner(eventID);
        allow write: if isEventOwner(eventID) && request.resource.data.secret is string;
      }
      
      match /lists/{list} {
        allow read: if isEventOwner(eventID) || isEventMember(eventID);
        allow write: if (list in ["times", "reqItems"] && isEventOwner(eventID)) 
                      || (list in ["locations", "colItems"] && (isEventOwner(eventID) || isEventMember(eventID)))
      }

      match /members/{memberID} {
        allow read: if isEventOwner(eventID) || isEventMember(eventID);
        allow write: if (memberID == "properties" && isEventOwner(eventID)) 
          || (memberID != "properties" && (isEventOwner(eventID) || isUser(memberID)));
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}